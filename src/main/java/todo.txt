top priority:

- (ok) rollback command
- test error messages by setting incorrect rights at each step
-- reuse setup task validation
-- dependencies
- test revert to previous when deploy fails
- stop when errors
- think of unit testing
- test rollback
- maven installation (via dependencies:get)

utils:

- (ok) remote WAR deploy
- sql dumps

features:

- (ok) jdk plugin
- (ok) grails plugin
- (ok) tomcat plugin
- set variables from the command line
- validate variables ("required" variables)
- variables registry (to list, to validate)
- list available variables
- fix weird error messages when errors occur
- make DynVars similar to JavaFX properties
- validation step: validation [ validate(closure) ]
- GitHub support
- (ok) replace Functions with VarFunctions
- upstart plugin
- play plugin
- maven plugin
- (ok) console: saving/loading user input - only in the very beginning
- configure variables from ENV
- (ok) add running from scripts
- dependencies
- verify installation by checking version installed
- interactive mode
- local console
- (ok) proguard
- basic operations should be available from console (revert, show revision, show log)
- events, listeners & notifications
- rewrite deployments in static groovy/java 8
- check live status

cap4j script:

Settings.java:

- Defines stages
- Configures plugins
- Sets roles for servers and tasks
- Sets common vars

Script is a slight modification of Settings to support the most common scenarios
When launching with no params:

0) run script? (if there are scripts - list them)
1) choose stage: pac-dev
2) choose branch: trunk
3) define common options: interactive, dry
4) choose a task
5) console/deploy
6)
7) ready to deploy - save your input to reuse? Saved as a script with name


- support different auth types

- refactor remote console
- add bash prompt?
- (ok) add svn revision to the build
- (ok) keepLastX
- (ok) rollbacks
- (ok) transactions
- (ok) caching
- (ok) releases dir

